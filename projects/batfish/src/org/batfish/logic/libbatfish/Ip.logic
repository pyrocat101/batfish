block(`Ip) {
   export(`{
// BEGIN CODE

/// [Ip(x)] =
///   [x] is an ip address.
Ip(x),
   Ip_address(x:n)
   ->
   int(n).

Ip_ZERO[] = ip ->
   Ip(ip).

/// [Network(x)] =
///   [x] is a network address.
Network(x) -> .

Network_constructor[network_start, network_end, prefix_length] = network ->
   int(network_start),
   int(network_end),
   int(prefix_length),
   Network(network).

Network_address[network] = network_start ->
   Network(network),
   int(network_start).

Network_end[network] = network_end ->
   Network(network),
   int(network_end).

Network_prefix_length[network] = prefix_length ->
   Network(network),
   int(prefix_length).

Network_index(network, network_start, network_end, prefix_length) ->
   Network(network),
   int(network_start),
   int(network_end),
   int(prefix_length).

NetworkOf[ip, prefix_length] = network ->
   Ip(ip),
   int(prefix_length),
   Network(network).

SetNetwork(networkIp, network_start, network_end, prefix_length) ->
   Ip(networkIp),
   int(network_start),
   int(network_end),
   int(prefix_length).

// END CODE
   }),
   clauses(`{ //constructors
lang:constructor(`Network_constructor).
   })
} <-- .

