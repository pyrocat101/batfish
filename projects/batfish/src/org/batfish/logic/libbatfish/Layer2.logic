block(`Layer2) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Node),
   export(`{
// BEGIN CODE

/// [Encapsulation(x)] =
///   [x] is a switchport encapsulation method.
Encapsulation(x),
   Encapsulation_name(x:s)
   ->
   string(s).

GuessTopology(dummy) ->
   int(dummy).

/// [LanAdjacent(node1, int1, node2, int2)] =
///   Interface [int1] on node [node1] and interface [int2] on node [node2] are
///   in the same broadcast domain.
LanAdjacent(node1, int1, node2, int2) ->
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2).

/// [SamePhysicalSegment(node1, int1, node2, int2)] =
///   Interface [int1] on node [node1] and interface [int2] on node [node2] are
///   in the same physical network segment.
SamePhysicalSegment(node1, int1, node2, int2) ->
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2).

/// [SetSwitchportAccess(switch, interface, vlan)] =
///   Interface [interface] on switch [switch] is configured for access mode on
///   vlan [vlan].
SetSwitchportAccess(switch, interface, vlan) ->
   Node(switch),
   Interface(interface),
   Vlan(vlan).

/// [SetSwitchportTrunkAllows(switch, interface, vlanStart, vlanEnd)] =
///   Interface [interface] on switch [switch] allows the vlan range
///   [vlanStart] to [vlanEnd].
SetSwitchportTrunkAllows(switch, interface, vlanStart, vlanEnd) ->
   Node(switch),
   Interface(interface),
   Vlan(vlanStart),
   Vlan(vlanEnd).

/// [SetSwitchportTrunkEncapsulation(switch, interface, encap)] =
///   Interface [interface] on switch [switch] has its trunk encapsulation set
///   to [encap].
SetSwitchportTrunkEncapsulation(switch, interface, encap) ->
   Node(switch),
   Interface(interface),
   Encapsulation(encap).

/// [SetSwitchportTrunkNative(switch, interface, vlan)] =
///   Interface [interface] on switch [switch] is configured to natively trunk
///   vlan [vlan].
SetSwitchportTrunkNative(switch, interface, vlan) ->
   Node(switch),
   Interface(interface),
   Vlan(vlan).

SetVlanInterface(node, interface, vlan) ->
   Node(node),
   Interface(interface),
   Vlan(vlan).

/// [SwitchportAccess(switch, interface, vlan)] =
///   Interface [interface] on switch [switch] is configured for access mode on vlan
///   [vlan], and interface [interface] is active.
SwitchportAccess(switch, interface, vlan) ->
   Node(switch),
   Interface(interface),
   Vlan(vlan).

/// [SwitchportTrunkAllows(switch, interface, vlan)] =
///   Interface [interface] on switch [switch] has been configured for trunking,
///   is trunking vlan [vlan], and is active.
SwitchportTrunkAllows(switch, interface, vlan) ->
   Node(switch),
   Interface(interface),
   Vlan(vlan).

/// [SwitchportTrunkNative(Switch, Int, Vlan)] =
///   Interface [interface] on switch [switch] is configured to natively trunk
///   vlan [vlan], and interface [interface] is active.
SwitchportTrunkNative(switch, interface, vlan) ->
   Node(switch),
   Interface(interface),
   Vlan(vlan).

/// [UsedVlan(vlan)] =
///   The vlan [vlan] has been assigned to some interface somewhere.
UsedVlan(vlan) ->
   Vlan(vlan).

/// [Vlan(x)] =
///   [x] is a vlan.
Vlan(x),
   Vlan_number(x:n)
   ->
   int(n).

VlanAdjacent(node1, vlanInt1, node2, vlanInt2) ->
   Node(node1),
   Interface(vlanInt1),
   Node(node2),
   Interface(vlanInt2).

/// [VlanNumber[vlan] = n] =
///   The number of vlan [vlan] is [n].
VlanNumber[vlan] = n ->
   Vlan(vlan),
   int(n).

// END CODE
   })
} <-- .

