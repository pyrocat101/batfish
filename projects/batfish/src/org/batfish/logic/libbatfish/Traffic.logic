block(`Traffic) {
   alias_all(`libbatfish:Flow),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:IpAccessList),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   export(`{
// BEGIN CODE

DuplicateRoleFlows(dummy) ->
   int(dummy).

/// [FlowAccepted(flow, node)] =
///   Flow [flow] was accepted by node [node].
FlowAccepted(flow, node) ->
   Flow(flow),
   Node(node).

/// [FlowAllowedIn(flow, node, interface, filter)] =
///   Flow [flow] was allowed into interface [interface] on node [node] by
///   access-list [filter].
FlowAllowedIn(flow, node, interface, filter) ->
   Flow(flow),
   Node(node),
   Interface(interface),
   IpAccessList(filter).

/// [FlowAllowedOut(flow, node, interface, filter)] =
///   Flow [flow] was allowed out of  interface [interface] on node [node] by
///   access-list [filter].
FlowAllowedOut(flow, node, interface, filter) ->
   Flow(flow),
   Node(node),
   Interface(interface),
   IpAccessList(filter).

/// [FlowDeniedIn(flow, node, interface, filter, line)] =
///   Flow [flow] was denied by node [node] by incoming acl [filter], line
///   [line] at input interface [interface].
FlowDeniedIn(flow, node, interface, filter, line) ->
   Flow(flow),
   Node(node),
   Interface(interface),
   IpAccessList(filter),
   int(line).

/// [FlowDeniedOut(flow, node, interface, filter, line)] =
///   Flow [flow] was denied by node [node] by outgoing acl [filter], line
///   [line] at output interface [interface].
FlowDeniedOut(flow, node, interface, filter, line) ->
   Flow(flow),
   Node(node),
   Interface(interface),
   IpAccessList(filter),
   int(line).

FlowDenyIn(flow, node, interface, filter, line) ->
   Flow(flow),
   Node(node),
   Interface(interface),
   IpAccessList(filter),
   int(line).

FlowDenyOut(flow, node, interface, filter, line) ->
   Flow(flow),
   Node(node),
   Interface(interface),
   IpAccessList(filter),
   int(line).

/// [FlowDropped(flow, node)] =
///   Flow [flow] was dropped by node [node].
FlowDropped(flow, node) ->
   Flow(flow),
   Node(node).

/// [FlowMultipathInconsistent(flow)] =
///   Flow [flow] has inconsistent paths.
FlowMultipathInconsistent(flow) ->
   Flow(flow).

/// [FlowLoop(flow, node, outInt)] =
///   Flow [flow] loops when sent out interface [outInt] on node [node].
FlowLoop(flow, node, outInt) ->
   Flow(flow),
   Node(node),
   Interface(outInt).

/// [FlowLost(flow)] =
///   Flow [flow] either dropped or looped somwhere (or both).
FlowLost(flow) ->
   Flow(flow).

FlowMatchRoute(flow, route) ->
   Flow(flow),
   Route(route).

FlowNeighborUnreachable(flow, node, neighborIp) ->
   Flow(flow),
   Node(node),
   Ip(neighborIp).

/// [FlowNoRoute(flow, node)] =
///   Flow [flow] was dropped by node [node] because it had no route to
///   [flow]'s destination.
FlowNoRoute(flow, node) ->
   Flow(flow),
   Node(node).

FlowNullRouted(flow, node) ->
   Flow(flow),
   Node(node).

FlowOriginate[node, srcIp, dstIp, srcPort, dstPort, protocol] = flow ->
   Node(node),
   Ip(srcIp),
   Ip(dstIp),
   int(srcPort),
   int(dstPort),
   int(protocol),
   Flow(flow).

FlowPathAcceptedEdge(flow, i, node1, int1, node2, int2, history) ->
   Flow(flow),
   int(i),
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2),
   string(history).

FlowPathDeniedInEdge(flow, i, int0, node1, int1, node2, int2, history, filter, line) ->
   Flow(flow),
   int(i),
   Interface(int0),
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2),
   string(history),
   IpAccessList(filter),
   int(line).

FlowPathDeniedOutEdge(flow, i, int0, node1, int1, node2, int2, history, filter, line) ->
   Flow(flow),
   int(i),
   Interface(int0),
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2),
   string(history),
   IpAccessList(filter),
   int(line).

FlowPathHistory(flow, history) ->
   Flow(flow),
   string(history).

FlowPathIntermediateEdge(flow, i, int0, node1, int1, node2, int2, history) ->
   Flow(flow),
   int(i),
   Interface(int0),
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2),
   string(history).

FlowPathNeighborUnreachableEdge(flow, i, node1, int1, node2, int2, history) ->
   Flow(flow),
   int(i),
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2),
   string(history).

FlowPathNoRouteEdge(flow, i, node1, int1, node2, int2, history) ->
   Flow(flow),
   int(i),
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2),
   string(history).

FlowPathNullRoutedEdge(flow, i, node1, int1, node2, int2, history) ->
   Flow(flow),
   int(i),
   Node(node1),
   Interface(int1),
   Node(node2),
   Interface(int2),
   string(history).

FlowPolicyDenied(flow, node, policy) ->
   Flow(flow),
   Node(node),
   PolicyMap(policy).

/// [FlowReach(flow, srcNode, srcOutInt, dstNode, dstInInt)] =
///   Flow [flow] is successfully sent out interface [srcOutInt] on node
///   [srcNode], and eventually successfully enters interface [dstInInt] on
///   node [dstNode].
FlowReach(flow, srcNode, srcOutInt, dstNode, dstInInt) ->
   Flow(flow),
   Node(srcNode),
   Interface(srcOutInt),
   Node(dstNode),
   Interface(dstInInt).

FlowReachPolicyRoute(flow, node, policy) ->
   Flow(flow),
   Node(node),
   PolicyMap(policy).

/// [FlowReachPostIn[flow, node] =
///   Flow [flow] successfully enters node [node], either by originating there
///   or being received on some interface.
FlowReachPostIn(flow, node) ->
   Flow(flow),
   Node(node).

FlowReachPostInInterface(flow, node, interface) ->
   Flow(flow),
   Node(node),
   Interface(interface).

FlowReachPostOutInterface(flow, node, interface) ->
   Flow(flow),
   Node(node),
   Interface(interface).

FlowReachPreInInterface(flow, node, interface) ->
   Flow(flow),
   Node(node),
   Interface(interface).

FlowReachPreOut(flow, node) ->
   Flow(flow),
   Node(node).

FlowReachPreOutEdge(flow, node, receivedInt, interface, nextHop, nextHopInt) ->
   Flow(flow),
   Node(node),
   Interface(receivedInt),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt).

FlowReachPreOutEdgeOrigin(flow, node, receivedInt, interface, nextHop, nextHopInt) ->
   Flow(flow),
   Node(node),
   Interface(receivedInt),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt).

FlowReachPreOutEdgePolicyRoute(flow, node, receivedInt, interface, nextHop, nextHopInt) ->
   Flow(flow),
   Node(node),
   Interface(receivedInt),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt).

FlowReachPreOutEdgeStandard(flow, node, receivedInt, interface, nextHop, nextHopInt) ->
   Flow(flow),
   Node(node),
   Interface(receivedInt),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt).

FlowReachPreOutInterface(flow, node, interface) ->
   Flow(flow),
   Node(node),
   Interface(interface).

/// [FlowReachStep(flow, srcNode, srcOutInt, dstNode, dstInInt)] =
///   Flow [flow] is successfully sent out interface [srcOutInt] on node
///   [srcNode] and then successfully enters interface [dstInInt] on node
///   [dstNode].
FlowReachStep(flow, srcNode, srcOutInt, dstNode, dstInInt) ->
   Flow(flow),
   Node(srcNode),
   Interface(srcOutInt),
   Node(dstNode),
   Interface(dstInInt).

/// [FlowUnknown(flow] =
///   Flow [flow] was neither accepted nor lost anywhere, so its disposition is
///   unkown.
FlowUnknown(flow) ->
   Flow(flow).

FlowRoleAccepted(flow, role) ->
   Flow(flow),
   Role(role).

FlowRoleInconsistent(transmittingRole, acceptedFlow, missingFlow, receivingRole) ->
   Role(transmittingRole),
   Flow(acceptedFlow),
   Flow(missingFlow),
   Role(receivingRole).

FlowRoleTransitInconsistent(srcRole, transitNode, nonTransitNode, transitRole, flow) ->
   Role(srcRole),
   Node(transitNode),
   Node(nonTransitNode),
   Role(transitRole),
   Flow(flow).

FlowRoleTransitNode(flow, srcRole, transitNode) ->
   Flow(flow),
   Role(srcRole),
   Node(transitNode).

FlowSameHeaderRoleTransitNode(flow, similarFlow, transitNode) ->
   Flow(flow),
   Flow(similarFlow),
   Node(transitNode).

FlowSameHeader(flow1, flow2) ->
   Flow(flow1),
   Flow(flow2).

SetFlowOriginate(node, srcIp, dstIp, srcPort, dstPort, protocol) ->
   Node(node),
   Ip(srcIp),
   Ip(dstIp),
   int(srcPort),
   int(dstPort),
   IpProtocol(protocol).

// END CODE
   }),
   //constructors
   clauses(`{
lang:constructor(`FlowOriginate).
   })
} <-- .

