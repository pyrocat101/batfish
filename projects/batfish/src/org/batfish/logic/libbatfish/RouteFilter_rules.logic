block(`RouteFilter_rules) {
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:RouteFilter),
   clauses(`{
// BEGIN CODE

RouteFilterDenyNetwork(list, network) <-
   RouteFilterFirstMatch[list, network] = line,
   !SetRouteFilterPermitLine(list, line).
RouteFilterDenyNetwork(list, network) <-
   need_RouteFilterMatchNetwork(list, network),
   !RouteFilterMatch(list, network, _).

RouteFilterFirstMatch[list, network] = matchLine <-
   agg<<matchLine = min(line)>> RouteFilterMatch(list, network, line).

RouteFilterMatch(list, network, line) <-
   need_RouteFilterMatchNetwork(list, network),
   SetRouteFilterLine(list, line, line_network_start, line_network_end, min_prefix, max_prefix),
   Network_constructor[network_start, _, prefix_length] = network,
   network_start >= line_network_start,
   network_start <= line_network_end,
   prefix_length >= min_prefix,
   prefix_length <= max_prefix.

RouteFilterPermitNetwork(list, network) <-
   RouteFilterFirstMatch[list, network] = line,
   SetRouteFilterPermitLine(list, line).

lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.

// END CODE 
   })
} <-- .

