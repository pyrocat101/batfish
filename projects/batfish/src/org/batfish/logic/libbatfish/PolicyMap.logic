block(`PolicyMap) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:CommunityList),
   alias_all(`libbatfish:Flow),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:IpAccessList),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Route),
   alias_all(`libbatfish:RouteFilter),
   export(`{
// BEGIN CODE

need_PolicyMapMatchAdvert(map, advert) ->
   PolicyMap(map),
   BgpAdvertisement(advert).

need_PolicyMapMatchFlow(map, flow) ->
   PolicyMap(map),
   Flow(flow).

need_PolicyMapMatchRoute(map, route) ->
   PolicyMap(map),
   Route(route).

PolicyMap(x),
   PolicyMap_name(x:n)
   ->
   string(n).

PolicyMapClauseMatchAdvert(map, clause, advert) ->
   PolicyMap(map),
   int(clause),
   BgpAdvertisement(advert).

PolicyMapClauseMatchFlow(map, clause, flow) ->
   PolicyMap(map),
   int(clause),
   Flow(flow).

PolicyMapClauseMatchRoute(map, clause, route) ->
   PolicyMap(map),
   int(clause),
   Route(route).

PolicyMapClauseTransformAdvert(map, clause, prevAdvert, nextHopIp, localPref, originType, med, srcProtocol) ->
   PolicyMap(map),
   int(clause),
   BgpAdvertisement(prevAdvert),
   Ip(nextHopIp),
   int(localPref),
   OriginType(originType),
   int(med),
   RoutingProtocol(srcProtocol).

PolicyMapDenyAdvert(map, advert) ->
   PolicyMap(map),
   BgpAdvertisement(advert).

PolicyMapDenyFlow(map, flow) ->
   PolicyMap(map),
   Flow(flow).

PolicyMapDenyRoute(map, route) ->
   PolicyMap(map),
   Route(route).

PolicyMapFirstMatchAdvert[map, advert] = firstClause ->
   PolicyMap(map),
   BgpAdvertisement(advert),
   int(firstClause).

PolicyMapFirstMatchFlow[map, flow] = firstClause ->
   PolicyMap(map),
   Flow(flow),
   int(firstClause).

PolicyMapFirstMatchRoute[map, route] = firstClause ->
   PolicyMap(map),
   Route(route),
   int(firstClause).

PolicyMapHasClause(map, clause) ->
   PolicyMap(map),
   int(clause).

PolicyMapPermitAdvert(map, clause, advert) ->
   PolicyMap(map),
   int(clause),
   BgpAdvertisement(advert).

PolicyMapPermitFlow(map, clause, flow) ->
   PolicyMap(map),
   int(clause),
   Flow(flow).

PolicyMapPermitRoute(map, clause, route) ->
   PolicyMap(map),
   int(clause),
   Route(route).

SetPolicyMapClauseAddCommunity(map, clause, community) ->
   PolicyMap(map),
   int(clause),
   int(community).

SetPolicyMapClauseDeleteCommunity(map, clause, list) ->
   PolicyMap(map),
   int(clause),
   CommunityList(list).

SetPolicyMapClauseDeny(map, clause) ->
   PolicyMap(map),
   int(clause).

SetPolicyMapClauseMatchAcl(map, clause, acl) ->
   PolicyMap(map),
   int(clause),
   IpAccessList(acl).

SetPolicyMapClauseMatchAsPath(map, clause, asPath) ->
   PolicyMap(map),
   int(clause),
   AsPath(asPath).

SetPolicyMapClauseMatchCommunityList(map, clause, list) ->
   PolicyMap(map),
   int(clause),
   CommunityList(list).

SetPolicyMapClauseMatchNeighbor(map, clause, neighborIp) ->
   PolicyMap(map),
   int(clause),
   Ip(neighborIp).

SetPolicyMapClauseMatchPolicy(map, clause, policy) ->
   PolicyMap(map),
   int(clause),
   PolicyMap(policy).

SetPolicyMapClauseMatchProtocol(map, clause, protocol) ->
   PolicyMap(map),
   int(clause),
   RoutingProtocol(protocol).

SetPolicyMapClauseMatchRouteFilter(map, clause, list) ->
   PolicyMap(map),
   int(clause),
   RouteFilter(list).

SetPolicyMapClauseMatchTag(map, clause, tag) ->
   PolicyMap(map),
   int(clause),
   int(tag).

SetPolicyMapClausePermit(map, clause) ->
   PolicyMap(map),
   int(clause).

SetPolicyMapClauseSetCommunity(map, clause, community) ->
   PolicyMap(map),
   int(clause),
   int(community).

SetPolicyMapClauseSetLocalPreference(map, clause, localPref) ->
   PolicyMap(map),
   int(clause),
   int(localPref).

SetPolicyMapClauseSetMetric(map, clause, metric) ->
   PolicyMap(map),
   int(clause),
   int(metric).

SetPolicyMapClauseSetNextHopIp(map, clause, nextHopIp) ->
   PolicyMap(map),
   int(clause),
   Ip(nextHopIp).

SetPolicyMapClauseSetOriginType(map, clause, originType) ->
   PolicyMap(map),
   int(clause),
   OriginType(originType).

SetPolicyMapOspfExternalRouteType(map, protocol) ->
   PolicyMap(map),
   RoutingProtocol(protocol).

// END CODE
   })
} <-- .

