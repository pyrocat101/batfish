block(`PolicyMap_rules) {
   alias_all(`libbatfish:AsPath),
   alias_all(`libbatfish:BgpAdvertisement),
   alias_all(`libbatfish:CommunityList),
   alias_all(`libbatfish:Flow),
   alias_all(`libbatfish:IpAccessList),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   alias_all(`libbatfish:RouteFilter),
   clauses(`{
// BEGIN CODE

need_AsPathMatchAdvert(asPath, advert) <-
   need_PolicyMapMatchAdvert(map, advert),
   SetPolicyMapClauseMatchAsPath(map, _, asPath).

need_PolicyMapMatchAdvert(map, advert) <-
   need_PolicyMapMatchAdvert(referringMap, advert),
   SetPolicyMapClauseMatchPolicy(referringMap, _, map).

need_PolicyMapMatchRoute(map, route) <-
   need_PolicyMapMatchRoute(referringMap, route),
   SetPolicyMapClauseMatchPolicy(referringMap, _, map).

// policy maps for advertisements
need_RouteFilterMatchNetwork(list, network) <-
   need_PolicyMapMatchAdvert(map, advert),
   BgpAdvertisement_network[advert] =  network,
   SetPolicyMapClauseMatchRouteFilter(map, _, list).
// policy maps for routes
need_RouteFilterMatchNetwork(list, network) <-
   need_PolicyMapMatchRoute(map, route),
   Route_network[route] = network,
   SetPolicyMapClauseMatchRouteFilter(map, _, list).

PolicyMapClauseMatchAdvert(map, clause, advert) <-
   need_PolicyMapMatchAdvert(map, advert),
   PolicyMapHasClause(map, clause),
   (
      !SetPolicyMapClauseMatchAsPath(map, clause, _) ;
      (
         SetPolicyMapClauseMatchAsPath(map, clause, asPath),
         AsPathPermitAdvert(asPath, advert)
      )
   ),
   (
      !SetPolicyMapClauseMatchRouteFilter(map, clause, _) ;
      (
         SetPolicyMapClauseMatchRouteFilter(map, clause, filter),
         BgpAdvertisement_network[advert] = dstIpBlock,
         RouteFilterPermitNetwork(filter, dstIpBlock) 
      )
   ),
   (
      !SetPolicyMapClauseMatchNeighbor(map, clause, _) ;
      (
         SetPolicyMapClauseMatchNeighbor(map, clause, neighborIp),
         (
            BgpAdvertisement_srcIp[advert] = neighborIp ;
            BgpAdvertisement_dstIp[advert] = neighborIp
         )
      )
   ),
   (
      !SetPolicyMapClauseMatchPolicy(map, clause, _) ;
      (
         SetPolicyMapClauseMatchPolicy(map, clause, policy),
         PolicyMapPermitAdvert(policy, _, advert)
      )
   ),
   (
      !SetPolicyMapClauseMatchCommunityList(map, clause, _) ;
      (
         SetPolicyMapClauseMatchCommunityList(map, clause, communityList),
         AdvertisementCommunity(advert, community),
         CommunityListPermit(communityList, _, community) 
      )
   ).
   //TODO: finish definition and replace underscores at top of rule

PolicyMapClauseMatchFlow(map, clause, flow) <-
   need_PolicyMapMatchFlow(map, flow),
   PolicyMapHasClause(map, clause),
   (
      !SetPolicyMapClauseMatchAcl(map, clause, _) ;
      (
         SetPolicyMapClauseMatchAcl(map, clause, acl),
         IpAccessListPermit(acl, _, flow)
      )
   ).

PolicyMapClauseMatchRoute(map, clause, route) <-
   //TODO: complete matching here
   need_PolicyMapMatchRoute(map, route),
   PolicyMapHasClause(map, clause),
   // protocol
   (
      !SetPolicyMapClauseMatchProtocol(map, clause, _) ;
      (
         Route_protocol[route] = protocol,
         SetPolicyMapClauseMatchProtocol(map, clause, protocol)
      )
   ),
   // RouteFilter
   (
      !SetPolicyMapClauseMatchRouteFilter(map, clause, _);
      (
         SetPolicyMapClauseMatchRouteFilter(map, clause, filter),
         Route_network[route] = network,
         RouteFilterPermitNetwork(filter, network)
      )
   ),
   // tag
   (
      !SetPolicyMapClauseMatchTag(map, clause, _);
      (
         SetPolicyMapClauseMatchTag(map, clause, tag),
         Route_tag[route] = tag
      )
   ).

PolicyMapClauseTransformAdvert(map, clause, prevAdvert, nextHopIp, localPref, originType, med, srcProtocol)
<-
   PolicyMapPermitAdvert(map, clause, prevAdvert),
   BgpAdvertisement_nextHopIp[prevAdvert] =  prevNextHopIp ,
   BgpAdvertisement_localPref[prevAdvert] =  prevLocalPref, 
   BgpAdvertisement_originType[prevAdvert] =  prevOriginType,
   BgpAdvertisement_med[prevAdvert] =  prevMed,
   BgpAdvertisement_srcProtocol[prevAdvert] =  prevSrcProtocol,
   //TODO: complete untransformed cases
   (
      SetPolicyMapClauseSetNextHopIp(map, clause, nextHopIp);
      (
         !SetPolicyMapClauseSetNextHopIp(map, clause, _),
         prevNextHopIp = nextHopIp
      )
   ),
   (
      SetPolicyMapClauseSetLocalPreference(map, clause, localPref);
      (
         !SetPolicyMapClauseSetLocalPreference(map, clause, _),
         prevLocalPref = localPref
      )
   ),
   (
      SetPolicyMapClauseSetOriginType(map, clause, originType);
      (
         !SetPolicyMapClauseSetOriginType(map, clause, _),
         prevOriginType = originType
      )
   ),
   (
      SetPolicyMapClauseSetMetric(map, clause, med);
      (
         !SetPolicyMapClauseSetMetric(map, clause, _),
         prevMed = med
      )
   ),
   prevSrcProtocol = srcProtocol.

PolicyMapDenyAdvert(map, advert) <-
   PolicyMapFirstMatchAdvert[map, advert] = clause,
   !SetPolicyMapClausePermit(map, clause).
PolicyMapDenyAdvert(map, advert) <-
   need_PolicyMapMatchAdvert(map, advert),
   !PolicyMapClauseMatchAdvert(map, _, advert).

PolicyMapDenyFlow(map, flow) <-
   PolicyMapFirstMatchFlow[map, flow] = clause,
   !SetPolicyMapClausePermit(map, clause).
PolicyMapDenyFlow(map, flow) <-
   need_PolicyMapMatchFlow(map, flow),
   !PolicyMapClauseMatchFlow(map, _, flow).

PolicyMapDenyRoute(map, route) <-
   PolicyMapFirstMatchRoute[map, route] = clause,
   !SetPolicyMapClausePermit(map, clause).
PolicyMapDenyRoute(map, route) <-
   need_PolicyMapMatchRoute(map, route),
   !PolicyMapClauseMatchRoute(map, _, route).

PolicyMapFirstMatchAdvert[map, advert] = firstClause
<-
   agg<<firstClause = min(clause)>>
      PolicyMapClauseMatchAdvert(map, clause, advert).

PolicyMapFirstMatchFlow[map, flow] = firstClause
<-
   agg<<firstClause = min(clause)>>
      PolicyMapClauseMatchFlow(map, clause, flow).

PolicyMapFirstMatchRoute[map, route] = firstClause <-
   agg<<firstClause = min(clause)>>
      PolicyMapClauseMatchRoute(map, clause, route).

PolicyMapHasClause(map, clause) <-
   SetPolicyMapClauseDeny(map, clause);
   SetPolicyMapClausePermit(map, clause).

PolicyMapPermitAdvert(map, clause, advert) <-
   PolicyMapFirstMatchAdvert[map, advert] = clause,
   SetPolicyMapClausePermit(map, clause).

PolicyMapPermitFlow(map, clause, flow) <-
   PolicyMapFirstMatchFlow[map, flow] = clause,
   SetPolicyMapClausePermit(map, clause).

PolicyMapPermitRoute(map, clause, route) <-
   PolicyMapFirstMatchRoute[map, route] = clause,
   SetPolicyMapClausePermit(map, clause).

lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.

// END CODE
   })
} <-- .

