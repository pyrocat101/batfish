block(`GeneratedRoute) {
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   export(`{
// BEGIN CODE

ActiveGeneratedRoute(route) ->
   Route(route).

ActiveGeneratedContributor(route, contributingRoute) ->
   Route(route),
   Route(contributingRoute).

BestGlobalGeneratedRoute(route) ->
   Route(route).

BestGlobalGeneratedRoute_nextHopIp(route, nextHopIp) ->
   Route(route),
   Ip(nextHopIp).

GeneratedRoute(route) ->
   Route(route).

GeneratedRoute_constructor[node, network, type] = route ->
   Node(node),
   Network(network),
   GeneratedRouteType(type),
   Route(route).

GeneratedRoute_type[route] = type ->
   Route(route),
   GeneratedRouteType(type).

GeneratedRoutePolicy(route, policy) ->
   Route(route),
   PolicyMap(policy).

GeneratedRouteType(type),
   GeneratedRouteType_name(type:name)
->
   string(name).

GeneratedRouteType_AGGREGATE[] = type ->
   GeneratedRouteType(type).

GeneratedRouteType_BGP[] = type ->
   GeneratedRouteType(type).

GeneratedRouteType_BGP_NEIGHBOR[] = type ->
   GeneratedRouteType(type).

GeneratedRouteType_GLOBAL[] = type ->
   GeneratedRouteType(type).

GeneratedRouteType_OSPF[] = type ->
   GeneratedRouteType(type).

GlobalGeneratedRoute(route) ->
   Route(route).

MinAdminContributingRoute(route, contributingRoute) ->
   Route(route),
   Route(contributingRoute).

MinBestGlobalGeneratedRoute_nextHopIp[route] = minNextHopIpInt ->
   Route(route),
   int(minNextHopIpInt).

MinContributingRouteAddress[route] = minAddress ->
   Route(route),
   int(minAddress).

MinContributingRouteAdmin[route] = minAdmin ->
   Route(route),
   int(minAdmin).

SetGeneratedRoute(node, network, admin) ->
   Node(node),
   Network(network),
   int(admin).

SetGeneratedRoute_flat(node, network_start, network_end, prefix_length, admin) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length),
   int(admin).

SetGeneratedRouteDiscard(node, network) ->
   Node(node),
   Network(network).

SetGeneratedRouteDiscard_flat(node, network_start, network_end, prefix_length) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length).

SetGeneratedRouteMetric(node, network, metric) ->
   Node(node),
   Network(network),
   int(metric).

SetGeneratedRouteMetric_flat(node, network_start, network_end, prefix_length, metric) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length),
   int(metric).

SetGeneratedRoutePolicy(node, network, map) ->
   Node(node),
   Network(network),
   PolicyMap(map).

SetGeneratedRoutePolicy_flat(node, network_start, network_end, prefix_length, map) ->
   Node(node),
   int(network_start),
   int(network_end),
   int(prefix_length),
   PolicyMap(map).

// END CODE
   }),
   clauses(`{
lang:constructor(`GeneratedRoute_constructor).
   })
} <-- .

