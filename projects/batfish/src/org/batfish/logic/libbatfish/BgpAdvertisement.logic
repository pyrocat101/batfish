block(`BgpAdvertisement) {
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Route),
   export(`{
// BEGIN CODE

AdvertisementType(x),
   AdvertisementType_name(x:n)
   ->
   string(n).

AdvertisementType_BGP[] = x ->
   AdvertisementType(x).

AdvertisementType_BGP_TI[] = x ->
   AdvertisementType(x).

AdvertisementType_BGP_TO[] = x ->
   AdvertisementType(x).

AdvertisementType_IBGP[] = x ->
   AdvertisementType(x).

AdvertisementType_IBGP_TI[] = x ->
   AdvertisementType(x).

AdvertisementType_IBGP_TO[] = x ->
   AdvertisementType(x).

BgpAdvertisement(x) -> .

BgpAdvertisement_constructor[type, dstIpBlock, nextHopIp, srcNode, srcIp, dstNode, dstIp, srcProtocol, originType] = advert
->
   AdvertisementType(type),
   Network(dstIpBlock),
   Ip(nextHopIp),
   Node(srcNode),
   Ip(srcIp),
   Node(dstNode),
   Ip(dstIp),
   BgpAdvertisement(advert),
   RoutingProtocol(srcProtocol),
   OriginType(originType).

BgpAdvertisement_details(type, dstIpBlock, nextHopIp, srcIp, dstIp, srcProtocol, srcNode, dstNode, localPref, med, originatorIp, originType)
->
   AdvertisementType(type),
   Network(dstIpBlock),
   Ip(nextHopIp),
   Ip(srcIp),
   Ip(dstIp),
   RoutingProtocol(srcProtocol),
   Node(srcNode),
   Node(dstNode),
   int(localPref),
   int(med),
   Ip(originatorIp),
   OriginType(originType).

BgpAdvertisement_dstIp[advert] =  dstIp ->
   BgpAdvertisement(advert),
   Ip(dstIp).


/// [BgpAdvertisement_dstNode[advert] =  dstNode] =
///   The destination node for advertisement [advert] is [dstNode].
BgpAdvertisement_dstNode[advert] =  dstNode ->
   BgpAdvertisement(advert),
   Node(dstNode).

BgpAdvertisement_localPref[advert] =  localPref ->
   BgpAdvertisement(advert),
   int(localPref).

BgpAdvertisement_med[advert] =  med ->
   BgpAdvertisement(advert),
   int(med).

BgpAdvertisement_network[advert] =  network ->
   BgpAdvertisement(advert),
   Network(network).

BgpAdvertisement_nextHopIp[advert] =  nextHopIp ->
   BgpAdvertisement(advert),
   Ip(nextHopIp).

BgpAdvertisement_originatorIp[advert] =  originatorIp ->
   BgpAdvertisement(advert),
   Ip(originatorIp).

BgpAdvertisement_originType[advert] =  originType ->
   BgpAdvertisement(advert),
   OriginType(originType).

BgpAdvertisement_srcIp[advert] =  srcIp ->
   BgpAdvertisement(advert),
   Ip(srcIp).

BgpAdvertisement_srcNode[advert] =  srcNode ->
   BgpAdvertisement(advert),
   Node(srcNode).

BgpAdvertisement_srcProtocol[advert] =  srcProtocol ->
   BgpAdvertisement(advert),
   RoutingProtocol(srcProtocol).

BgpAdvertisement_type[advert] =  type ->
   BgpAdvertisement(advert),
   AdvertisementType(type).

OriginType(x),
   OriginType_name(x:n)
   ->
   string(n).

OriginType_IGP[] = originType ->
   OriginType(originType).

OriginType_EGP[] = originType ->
   OriginType(originType).

OriginType_INCOMPLETE[] = originType ->
   OriginType(originType).

// END CODE
   }),
   clauses(`{ //constructors
lang:constructor(`BgpAdvertisement_constructor).
   })
} <-- .

