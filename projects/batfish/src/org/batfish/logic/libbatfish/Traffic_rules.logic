block(`Traffic_rules) {
   alias_all(`libbatfish:DataPlane),
   alias_all(`libbatfish:Flow),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:IpAccessList),
   alias_all(`libbatfish:Layer2),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   alias_all(`libbatfish:Traffic),
   clauses(`{
// BEGIN CODE

FlowAccepted(flow, node) <-
   FlowReachPostIn(flow, node),
   Flow_dstIp[flow] = dstIp,
   HasIp(node, dstIp).
FlowAccepted(flow, node) <-
   FlowReachPostOutInterface(flow, node, interface),
   FlowSinkInterface(node, interface).

FlowAllowedIn(flow, node, interface, filter) <-
   FlowReachPostInInterface(flow, node, interface),
   SetInterfaceFilterIn(node, interface, filter).

FlowAllowedOut(flow, node, interface, filter) <-
   FlowReachPostOutInterface(flow, node, interface),
   SetInterfaceFilterOut(node, interface, filter).

FlowDeniedIn(flow, node, interface, filter, line) <-
   FlowReachPreInInterface(flow, node, interface),
   FlowDenyIn(flow, node, interface, filter, line).   

FlowDeniedOut(flow, node, interface, filter, line) <-
   FlowReachPreOutInterface(flow, node, interface),
   FlowDenyOut(flow, node, interface, filter, line).   

FlowDenyIn(flow, node, interface, filter, line) <-
   SetInterfaceFilterIn(node, interface, filter),
   IpAccessListDeny(filter, line, flow).

FlowDenyOut(flow, node, interface, filter, line) <-
   SetInterfaceFilterOut(node, interface, filter),
   IpAccessListDeny(filter, line, flow).

FlowDropped(flow, node) <-
   FlowDeniedIn(flow, node, _, _, _).   
FlowDropped(flow, node) <-
   FlowDeniedOut(flow, node, _, _, _).   
FlowDropped(flow, node) <-
   FlowNeighborUnreachable(flow, node, _).
FlowDropped(flow, node) <-
   FlowNoRoute(flow, node).
FlowDropped(flow, node) <-
   FlowNullRouted(flow, node).

FlowNeighborUnreachable(flow, node, neighborIp) <-
   Flow_dstIp[flow] = dstIp,
   FlowReachPreOut(flow, node),
   FibNeighborUnreachable(node, dstIp, neighborIp).

FlowMultipathInconsistent(flow) <-
   FlowLost(flow),
   FlowAccepted(flow, _).

FlowLoop(flow, node, outInt) <-
   FlowReach(flow, node, outInt, node, _).

FlowLost(flow) <-
   FlowDropped(flow, _) ;
   FlowLoop(flow, _, _).

FlowMatchRoute(flow, route) <-
   Flow_dstIp[flow] = dstIp,
   FlowReachPostIn(flow, node),
   LongestPrefixNetworkMatch(node, dstIp, network),
   InstalledRoute(route),
   Route_node[route] = node,
   Route_network[route] = network.

FlowNoRoute(flow, node) <-
   FlowReachPreOut(flow, node),
   Flow_dstIp[flow] = dstIp,
   !FibRoute(node, dstIp).

FlowNullRouted(flow, node) <-
   Flow_dstIp[flow] = dstIp,
   FlowReachPreOut(flow, node),
   FibDrop(node, dstIp),
   !FibNeighborUnreachable(node, dstIp, _).

FlowOriginate[node, srcIp, dstIp, srcPort, dstPort, protocol] = flow,
Flow(flow),
Flow_dstIp[flow] = dstIp,
Flow_dstPort[flow] = dstPort,
Flow_ipProtocol[flow] = protocol,
Flow_node[flow] = node,
Flow_srcIp[flow] = srcIp,
Flow_srcPort[flow] = srcPort
<-
   SetFlowOriginate(node, srcIp, dstIp, srcPort, dstPort, protocol).
FlowOriginate[node, srcIp, dstIp, srcPort, dstPort, protocol] = flow,
Flow(flow),
Flow_dstIp[flow] = dstIp,
Flow_dstPort[flow] = dstPort,
Flow_ipProtocol[flow] = protocol,
Flow_node[flow] = node,
Flow_srcIp[flow] = srcIp,
Flow_srcPort[flow] = srcPort
<-
   DuplicateRoleFlows(_),
   SetFlowOriginate(acceptNode, srcIp, dstIp, srcPort, dstPort, protocol),
   SetNodeRole(acceptNode, role),
   SetNodeRole(node, role).

FlowReach(flow, srcNode, srcOutInt, dstNode, dstInInt) <-
   FlowReachStep(flow, srcNode, srcOutInt, dstNode, dstInInt).
FlowReach(flow, srcNode, srcOutInt, dstNode, dstInInt) <-
   FlowReach(flow, srcNode, srcOutInt, midNode, _),
   FlowReach(flow, midNode, _, dstNode, dstInInt). 

FlowPolicyDenied(flow, node, policy) <-
   FlowReachPolicyRoute(flow, node, policy),
   PolicyMapDenyFlow(policy, flow).

FlowReachPolicyRoute(flow, node, policy) <-
   FlowReachPreOut(flow, node),
   FlowReachPostInInterface(flow, node, interface),
   SetInterfaceRoutingPolicy(node, interface, policy).

FlowReachPostIn(flow, node) <-
   Flow_node[flow] = node.   
FlowReachPostIn(flow, node) <-
   FlowReachPostInInterface(flow, node, _).

FlowReachPostInInterface(flow, node, interface) <-
   FlowReachPreInInterface(flow, node, interface),
   !FlowDenyIn(flow, node, interface, _, _).

FlowReachPostOutInterface(flow, node, interface) <-
   FlowReachPreOutInterface(flow, node, interface),
   !FlowDenyOut(flow, node, interface, _, _).

FlowReachPreInInterface(flow, node, interface) <-
   FlowReachPostOutInterface(flow, prevNode, prevInterface),
   FlowReachPreOutEdge(flow, prevNode, _, prevInterface, node, interface),
   interface != Interface_FLOW_SINK_TERMINATION[].

FlowReachPreOut(flow, node) <-
   FlowReachPostIn(flow, node),
   Flow_dstIp[flow] = dstIp,
   !HasIp(node, dstIp).

FlowReachPreOutInterface(flow, node, interface) <-
   FlowReachPreOutEdge(flow, node, _, interface, _, _).

FlowReachPreOutEdge(flow, node, receivedInt, outInt, nextHop, nextHopInt) <-
   FlowReachPreOutEdgeOrigin(flow, node, receivedInt, outInt, nextHop, nextHopInt) ;
   FlowReachPreOutEdgeStandard(flow, node, receivedInt, outInt, nextHop, nextHopInt) ;
   FlowReachPreOutEdgePolicyRoute(flow, node, receivedInt, outInt, nextHop, nextHopInt).

FlowReachPreOutEdgeOrigin(flow, node, receivedInt, outInt, nextHop, nextHopInt) <-
   FlowReachPreOut(flow, node),
   receivedInt = Interface_NULL[],
   Flow_dstIp[flow] = dstIp,
   FibForward(node, dstIp, outInt, nextHop, nextHopInt),
   Flow_node[flow] = node.

FlowReachPreOutEdgePolicyRoute(flow, node, receivedInt, interface, nextHop, nextHopInt) <-
   FlowReachPostInInterface(flow, node, receivedInt),
   SetInterfaceRoutingPolicy(node, receivedInt, policy),
   FlowReachPolicyRoute(flow, node, policy),
   PolicyMapPermitFlow(policy, clause, flow),
   SetPolicyMapClauseSetNextHopIp(policy, clause, nextHopIp),
   FibForwardPolicyRouteNextHopIp(node, nextHopIp, interface, nextHop, nextHopInt).

FlowReachPreOutEdgeStandard(flow, node, receivedInt, outInt, nextHop, nextHopInt) <-
   FlowReachPreOut(flow, node),
   Flow_dstIp[flow] = dstIp,
   FibForward(node, dstIp, outInt, nextHop, nextHopInt),
   FlowReachPostInInterface(flow, node, receivedInt),
   (
      !SetInterfaceRoutingPolicy(node, receivedInt, _) ;
      (
         SetInterfaceRoutingPolicy(node, receivedInt, policy),
         !PolicyMapPermitFlow(policy, _, flow)
      )
   ).

FlowReachStep(flow, srcNode, srcOutInt, dstNode, dstInInt) <-
   FlowReachPostOutInterface(flow, srcNode, srcOutInt),
   FlowReachPostInInterface(flow, dstNode, dstInInt),
   LanAdjacent(srcNode, srcOutInt, dstNode, dstInInt).

FlowUnknown(flow) <-
   Flow(flow),
   !FlowAccepted(flow, _),
   !FlowLost(flow).

need_PolicyMapMatchFlow(policy, flow) <-
   Flow(flow),
   PolicyMap(policy).

FlowPathAcceptedEdge(flow, i, node1, int1, node2, int2, history) <-
   FlowPathIntermediateEdge(flow, i, _, node1, int1, node2, int2, oldHistory),
   FlowAccepted(flow, node2),
   history = oldHistory + ":accepted".
FlowPathAcceptedEdge(flow, i, node1, int1, node2, int2, history) <-
   !FlowPathIntermediateEdge(flow, _, _, _, _, node1, _, _),
   node2 = Node_NONE[],
   i = 0,
   int1 = Interface_NULL[],
   int2 = Interface_NULL[],
   FlowAccepted(flow, node1),
   Node_name(node1:node1str),
   history = "['" + node1str + "':accepted]".

FlowPathDeniedInEdge(flow, i, receivedInt, node1, int1, node2, int2, history, filter, line) <-
   (
      (
         i = j + 1,
         FlowPathIntermediateEdge(flow, j, _, _, _, node1, receivedInt, oldHistory),
         history = oldHistory + ";" + currentHistory
      ) ;
      (
         Flow_node[flow] = node1,
         i = 0,
         receivedInt = Interface_NULL[],
         history = currentHistory
      )
   ),
   (
      (
         !SetInterfaceFilterOut(node1, int1, _),
         allowedOutStr = ""
      ) ;
      (
         FlowAllowedOut(flow, node1, int1, filterOut),
         IpAccessList_name(filterOut:filterOutStr),
         allowedOutStr = ":allowedOut:'" + filterOutStr + "'"
      )
   ),
   FlowReachPreOutEdge(flow, node1, receivedInt, int1, node2, int2),
   FlowDeniedIn(flow, node2, int2, filter, line),
   Node_name(node1:node1str),
   Node_name(node2:node2str),
   Interface_name(int1:int1str),
   Interface_name(int2:int2str),
   IpAccessList_name(filter:filterStr),
   lineStr = int:string:convert[line],
   currentHistory = "['" + node1str + "':'" + int1str + "'" + allowedOutStr + "-> '" + node2str + "':'" + int2str + "':deniedIn:'" + filterStr + "':" + lineStr + "]".

FlowPathDeniedOutEdge(flow, i, receivedInt, node1, int1, node2, int2, history, filter, line) <-
   (
      (
         i = j + 1,
         FlowPathIntermediateEdge(flow, j, _, _, _, node1, receivedInt, oldHistory),
         history = oldHistory + ";" + currentHistory
      ) ;
      (
         Flow_node[flow] = node1,
         i = 0,
         receivedInt = Interface_NULL[],
         history = currentHistory
      )
   ),
   FlowReachPreOutEdge(flow, node1, receivedInt, int1, node2, int2),
   FlowDeniedOut(flow, node1, int1, filter, line),
   Node_name(node1:node1str),
   Node_name(node2:node2str),
   Interface_name(int1:int1str),
   Interface_name(int2:int2str),
   IpAccessList_name(filter:filterStr),
   lineStr = int:string:convert[line],
   currentHistory = "['" + node1str + "':'" + int1str + "':deniedOut:'" + filterStr + "':" + lineStr + "-> '" + node2str + "':'" + int2str + "']".

FlowPathHistory(flow, history) <-
   FlowPathAcceptedEdge(flow, _, _, _, _, _, history) ;
   FlowPathDeniedInEdge(flow, _, _, _, _, _, _, history, _, _) ;
   FlowPathDeniedOutEdge(flow, _, _, _, _, _, _, history, _, _) ;
   FlowPathNeighborUnreachableEdge(flow, _, _, _, _, _, history) ;
   FlowPathNoRouteEdge(flow, _, _, _, _, _, history) ;
   FlowPathNullRoutedEdge(flow, _, _, _, _, _, history).

FlowPathIntermediateEdge(flow, i, receivedInt, node1, int1, node2, int2, history) <-
   (
      (
         i = 0,
         FlowReachPreOutEdgeOrigin(flow, node1, receivedInt, int1, node2, int2),
         history = currentHistory
      ) ;
      (
         i = j + 1,
         !FlowLoop(flow, _, _),
         FlowPathIntermediateEdge(flow, j, _, _, _, node1, receivedInt, oldHistory),
         FlowReachPreOutEdge(flow, node1, receivedInt, int1, node2, int2),
         history = oldHistory + ";" + currentHistory
      )
   ),
   (
      (
         !SetInterfaceFilterIn(node2, int2, _),
         allowedInStr = ""
      ) ;
      (
         FlowAllowedIn(flow, node2, int2, filterIn),
         IpAccessList_name(filterIn:filterInStr),
         allowedInStr = ":allowedIn:'" + filterInStr + "'"
      )
   ),
   (
      (
         !SetInterfaceFilterOut(node1, int1, _),
         allowedOutStr = ""
      ) ;
      (
         FlowAllowedOut(flow, node1, int1, filterOut),
         IpAccessList_name(filterOut:filterOutStr),
         allowedOutStr = ":allowedOut:'" + filterOutStr + "'"
      )
   ),
   FlowReachPostOutInterface(flow, node1, int1),
   FlowReachPostInInterface(flow, node2, int2),
   Node_name(node1:node1str),
   Node_name(node2:node2str),
   Interface_name(int1:int1str),
   Interface_name(int2:int2str),
   currentHistory = "['" + node1str + "':'" + int1str + "'" + allowedOutStr + "-> '" + node2str + "':'" + int2str + "'" + allowedInStr + "]".

FlowPathNeighborUnreachableEdge(flow, i, node1, int1, node2, int2, history) <-
   FlowPathIntermediateEdge(flow, i, _, node1, int1, node2, int2, oldHistory),
   FlowNeighborUnreachable(flow, node2, _),
   history = oldHistory + ":neighborUnreachable".
FlowPathNeighborUnreachableEdge(flow, i, node1, int1, node2, int2, history) <-
   !FlowPathIntermediateEdge(flow, _, _, _, _, node1, _, _),
   node2 = Node_NONE[],
   i = 0,
   int1 = Interface_NULL[],
   int2 = Interface_NULL[],
   FlowNeighborUnreachable(flow, node1, _),
   Node_name(node1:node1str),
   history = "['" + node1str + "':neighborUnreachable]".

FlowPathNoRouteEdge(flow, i, node1, int1, node2, int2, history) <-
   FlowPathIntermediateEdge(flow, i, _, node1, int1, node2, int2, oldHistory),
   FlowNoRoute(flow, node2),
   history = oldHistory + ":noRoute".
FlowPathNoRouteEdge(flow, i, node1, int1, node2, int2, history) <-
   !FlowPathIntermediateEdge(flow, _, _, _, _, node1, _, _),
   node2 = Node_NONE[],
   i = 0,
   int1 = Interface_NULL[],
   int2 = Interface_NULL[],
   FlowNoRoute(flow, node1),
   Node_name(node1:node1str),
   history = "['" + node1str + "':noRoute]".

FlowPathNullRoutedEdge(flow, i, node1, int1, node2, int2, history) <-
   FlowPathIntermediateEdge(flow, i, _, node1, int1, node2, int2, oldHistory),
   FlowNullRouted(flow, node2),
   history = oldHistory + ":nullRouted".
FlowPathNullRoutedEdge(flow, i, node1, int1, node2, int2, history) <-
   !FlowPathIntermediateEdge(flow, _, _, _, _, node1, _, _),
   node2 = Node_NONE[],
   i = 0,
   int1 = Interface_NULL[],
   int2 = Interface_NULL[],
   FlowNullRouted(flow, node1),
   Node_name(node1:node1str),
   history = "['" + node1str + "':nullRouted]".

FlowRoleAccepted(flow, role) <-
   FlowAccepted(flow, node),
   SetNodeRole(node, role).

FlowRoleInconsistent(transmittingRole, acceptedFlow, missingFlow, receivingRole) <-
   FlowSameHeader(acceptedFlow, missingFlow),
   Flow_node[acceptedFlow] = node1,
   Flow_node[missingFlow] = node2,
   SetNodeRole(node1, transmittingRole),
   SetNodeRole(node2, transmittingRole),
   FlowRoleAccepted(acceptedFlow, receivingRole),
   !FlowRoleAccepted(missingFlow, receivingRole).

FlowRoleTransitInconsistent(srcRole, transitNode, nonTransitNode, transitRole, flow) <-
   SetNodeRole(transitNode, transitRole),
   SetNodeRole(nonTransitNode, transitRole),
   FlowRoleTransitNode(flow, srcRole, transitNode),
   srcRole != transitRole,
   !FlowSameHeaderRoleTransitNode(flow, _, nonTransitNode).

FlowRoleTransitNode(flow, srcRole, transitNode) <-
   Flow_node[flow] = srcNode,
   SetNodeRole(srcNode, srcRole),
   SetNodeRole(transitNode, transitRole),
   srcRole != transitRole,
   FlowReachPostOutInterface(flow, transitNode, _).

FlowSameHeaderRoleTransitNode(flow, similarFlow, transitNode) <-
   flow = similarFlow,
   FlowRoleTransitNode(flow, _, transitNode).
FlowSameHeaderRoleTransitNode(flow, similarFlow, transitNode) <-
   FlowRoleTransitNode(flow, srcRole, transitNode),
   Flow_node[similarFlow] = srcNode,
   SetNodeRole(srcNode, srcRole),
   SetNodeRole(transitNode, transitRole),
   srcRole != transitRole,
   FlowSameHeader(flow, similarFlow).

FlowSameHeader(flow1, flow2) <-
   FlowOriginate[node1, srcIp, dstIp, srcPort, dstPort, protocol] = flow1,
   FlowOriginate[node2, srcIp, dstIp, srcPort, dstPort, protocol] = flow2,
   node1 != node2.

lang:compiler:disableWarning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = true.
// END CODE
   })
} <-- .

