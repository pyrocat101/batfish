block(`Ospf_rules) {
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Layer2),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Ospf),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

BestOspfE1Route(route),
   OspfE1Network(node, network)
<-
   OspfE1Route(route),
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_node[route] = node,
   MinOspfE1RouteCost[node, network] = cost,
   !OspfNetwork(node, network),
   !OspfIANetwork(node, network).


BestOspfE2Route(route) <-
   OspfE2Route(route),
   OspfRoute_costToAdvertiser[route] = costToAdvertiser,
   Route_network[route] = network,
   Route_node[route] = node,
   MinOspfE2RouteCostToAdvertiser[node, network] = costToAdvertiser,
   !OspfE1Network(node, network),
   !OspfNetwork(node, network),
   !OspfIANetwork(node, network).

BestOspfIARoute(route),
   OspfIANetwork(node, network)
<-
   OspfIARoute(route),
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_node[route] = node,
   MinOspfIARouteCost[node, network] = cost,
   !OspfNetwork(node, network).

BestOspfRoute(route),
   OspfNetwork(node, network)
<-
   OspfRoute(route),
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_node[route] = node,
   MinOspfRouteCost[node, network] = cost.

BestPerProtocolRoute(route) <-
   BestOspfRoute(route) ;
   BestOspfE1Route(route) ;
   BestOspfE2Route(route) ;
   BestOspfIARoute(route).

MinOspfE1RouteCost[node, network] = minCost <-
   agg<<minCost = min(cost)>>
      OspfE1Route(route),
      Route_cost[route] = cost,
      Route_network[route] = network,
      Route_node[route] = node.

MinOspfE2RouteCostToAdvertiser[node, network] = minCostToAdvertiser <-
   agg<<minCostToAdvertiser = min(costToAdvertiser)>>
      OspfE2Route(route),
      OspfRoute_costToAdvertiser[route] = costToAdvertiser,
      Route_network[route] = network,
      Route_node[route] = node.   

MinOspfIARouteCost[node, network] = minCost <-
   agg<<minCost = min(cost)>>
      OspfIARoute(route),
      Route_cost[route] = cost,
      Route_network[route] = network,
      Route_node[route] = node.

MinOspfRouteCost[node, network] = minCost <-
   agg<<minCost = min(cost)>>
      OspfRoute(route),
      Route_cost[route] = cost,
      Route_network[route] = network,
      Route_node[route] = node.

need_PolicyMapMatchRoute(map, route) <-
   SetOspfOutboundPolicyMap(node, map),
   Route_node[route] = node,
   (
      InstalledRoute(route) ;
      (
         OspfGeneratedRoute(route),
         ActiveGeneratedRoute(route)
      )
   ).
need_PolicyMapMatchRoute(map, route) <-
   SetOspfGeneratedRoutePolicy(node, _, map),
   InstalledRoute(route),
   Route_node[route] = node.

// (base case) import ospfE1 routes exported by ospf neighbors
OspfE1Route(route),
   Route(route),
   NonOspfExportableRoute(route),
   OspfE1Route_constructor[advertiser, node, network, nextHopIp] = route,
   OspfRoute_advertiser[route] = advertiser,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   cost = exportCost + costToAdvertiser,
   !ConnectedRoute(node, network, _),
   OspfNeighbors(node, _, costToAdvertiser, nextHop, nextHopInt, _, _, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   node != advertiser,
   node != nextHop,
   advertiser = nextHop,
   OspfExport(advertiser, network, exportCost, protocol),
   protocol = RoutingProtocol_OSPF_E1[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (recursive case) propagate ospfE1 over ospf
OspfE1Route(route),
   Route(route),
   NonOspfExportableRoute(route),
   OspfE1Route_constructor[advertiser, node, network, nextHopIp] = route,
   OspfRoute_advertiser[route] = advertiser,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   OspfNeighbors(node, _, nodeIntCost, nextHop, nextHopInt, _, _, area),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   OspfNeighbors(nextHop, _, _, secondHop, _, _, _, area),
   BestOspfE1Route(subRoute),
   OspfRoute_advertiser[subRoute] = advertiser,
   Route_cost[subRoute] = subCost,
   Route_network[subRoute] = network,
   Route_nextHopIp[subRoute] = secondHopIp,
   Route_node[subRoute] = nextHop,
   HasIp(secondHop, secondHopIp),
   node != secondHop,
   node != advertiser,
   cost = subCost + nodeIntCost,
   protocol = RoutingProtocol_OSPF_E1[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.

// (base case) import ospfE2 routes exported by ospf neighbors
OspfE2Route(route),
   Route(route),
   NonOspfExportableRoute(route),
   OspfE2Route_constructor[advertiser, costToAdvertiser, node, network, nextHopIp] = route,
   OspfRoute_advertiser[route] = advertiser,
   OspfRoute_advertiserIp[route] = advertiserIp,
   OspfRoute_costToAdvertiser[route] = costToAdvertiser,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _),
   OspfNeighbors(node, _, costToAdvertiser, nextHop, nextHopInt, _, _, _),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   node != advertiser,
   node != nextHop,
   advertiser = nextHop,
   SetOspfRouterId(advertiser, advertiserIp),
   OspfExport(advertiser, network, cost, protocol),
   protocol = RoutingProtocol_OSPF_E2[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (recursive case) propagate ospfE2 over ospf
OspfE2Route(route),
   Route(route),
   NonOspfExportableRoute(route),
   OspfE2Route_constructor[advertiser, costToAdvertiser, node, network, nextHopIp] = route,
   OspfRoute_advertiser[route] = advertiser,
   OspfRoute_advertiserIp[route] = advertiserIp,
   OspfRoute_costToAdvertiser[route] = costToAdvertiser,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   OspfNeighbors(node, _, nodeIntCost, nextHop, nextHopInt, _, _, area),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   OspfNeighbors(nextHop, _, _, secondHop, _, _, _, area),
   BestOspfE2Route(subRoute),
   Route_cost[subRoute] = cost,
   Route_network[subRoute] = network,
   Route_nextHopIp[subRoute] = secondHopIp,
   Route_node[subRoute] = nextHop,
   OspfRoute_advertiser[subRoute] = advertiser,
   OspfRoute_advertiserIp[subRoute] = advertiserIp,
   OspfRoute_costToAdvertiser[subRoute] = subCost,
   HasIp(secondHop, secondHopIp),
   node != secondHop,
   node != advertiser,
   costToAdvertiser = subCost + nodeIntCost,
   protocol = RoutingProtocol_OSPF_E2[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.

OspfExport(node, network, newCost, protocol) <-
   (
      InstalledRoute(route) ;
      (
         OspfGeneratedRoute(route),
         ActiveGeneratedRoute(route)
      )
   ),
   !NonOspfExportableRoute(route),
   Route_network[route] = network,
   Route_node[route] = node,
   SetOspfOutboundPolicyMap(node, map),
   SetPolicyMapOspfExternalRouteType(map, protocol),
   PolicyMapPermitRoute(map, clause, route),
   SetPolicyMapClauseSetMetric(map, clause, newCost),
   (
      !ConnectedRoute(node, network, _) ;
      (
         ConnectedRoute(node, network, interface),
         !SetOspfInterface(node, interface, _)
      )
   ).

OspfGeneratedRoute(route),
   Route(route),
   GeneratedRoute_constructor[node, network, type] = route,
   GeneratedRoute(route),
   GeneratedRoute_type[route] = type,
   Route_network[route] = network,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   SetOspfGeneratedRoute(node, network),
   type = GeneratedRouteType_OSPF[],
   protocol = RoutingProtocol_AGGREGATE[].

GeneratedRoutePolicy(route, policy) <-
   OspfGeneratedRoute(route),
   Route_network[route] = network,
   Route_node[route] = node,
   SetOspfGeneratedRoutePolicy(node, network, policy).

// distribute connected routes from another area into backbone area
OspfIARoute(route),
   Route(route),
   NonOspfExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   OspfNeighbors(node, _, nodeIntCost, nextHop, nextHopInt, _, _, 0),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   ConnectedRoute(nextHop, network, nextHopConnectedInt),
   SetOspfInterface(nextHop, nextHopConnectedInt, area),
   area != 0,
   SetOspfInterfaceCost[nextHop, nextHopConnectedInt] = nextHopIntCost,
   cost = nodeIntCost + nextHopIntCost,
   protocol = RoutingProtocol_OSPF_IA[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// propagate ospf ia routes through backbone area
OspfIARoute(route),
   Route(route),
   NonOspfExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   OspfNeighbors(node, _, nodeIntCost, nextHop, nextHopInt, _, _, area),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   OspfNeighbors(nextHop, _, _, secondHop, _, _, _, area),
   BestOspfIARoute(subRoute),
   Route_cost[subRoute] = subCost,
   Route_network[subRoute] = network,
   Route_nextHopIp[subRoute] = secondHopIp,
   Route_node[subRoute] = nextHop,
   HasIp(secondHop, secondHopIp),
   area = 0,
   node != secondHop,
   cost = subCost + nodeIntCost,
   protocol = RoutingProtocol_OSPF_IA[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.

//TODO: OSPF IA Routes propagated from OSPF routes (not just connected routes) in another area

OspfNeighbors(node1, int1, cost1, node2, int2, cost2, network, area) <-
   OspfNode(node1, int1, cost1, network, area),
   OspfNode(node2, int2, cost2, network, area),
   LanAdjacent(node1, int1, node2, int2).

OspfNode(node, interface, cost, network, area) <-
   IpReadyInt(node, interface, ip, prefix_length),
   SetOspfInterfaceCost[node, interface] = cost,
   SetOspfInterface(node, interface, area),
   NetworkOf[ip, prefix_length] = network.

OspfOutboundPolicyClauseSetMetric(map, clause, metric) <-
   SetOspfOutboundPolicyMap(_, map),
   SetPolicyMapClauseSetMetric(map, clause, metric).

// (base case) connected route on ospf-enabled interface
OspfRoute(route),
   Route(route),
   NonOspfExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   OspfNeighbors(node, _, nodeIntCost, nextHop, nextHopInt, _, _, area),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   ConnectedRoute(nextHop, network, nextHopConnectedInt),
   SetOspfInterface(nextHop, nextHopConnectedInt, area),
   SetOspfInterfaceCost[nextHop, nextHopConnectedInt] = nextHopIntCost,
   cost = nodeIntCost + nextHopIntCost,
   protocol = RoutingProtocol_OSPF[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.
// (recursive case) propagate ospf over ospf
OspfRoute(route),
   Route(route),
   NonOspfExportableRoute(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   !ConnectedRoute(node, network, _), // is this necessary?
   OspfNeighbors(node, _, nodeIntCost, nextHop, nextHopInt, _, _, area),
   IpReadyInt(nextHop, nextHopInt, nextHopIp, _),
   OspfNeighbors(nextHop, _, _, secondHop, _, _, _, area),
   BestOspfRoute(subRoute),
   Route_cost[subRoute] = subCost,
   Route_network[subRoute] = network,
   Route_nextHopIp[subRoute] = secondHopIp,
   Route_node[subRoute] = nextHop,
   HasIp(secondHop, secondHopIp),
   node != secondHop,
   cost = subCost + nodeIntCost,
   protocol = RoutingProtocol_OSPF[],
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin.


SetOspfGeneratedRoute(node, network) <-
   SetOspfGeneratedRoute_flat(node, network_start, network_end, prefix_length),
   Network_constructor[network_start, network_end, prefix_length] = network.

SetOspfGeneratedRoutePolicy(node, network, map) <-
   SetOspfGeneratedRoutePolicy_flat(node, network_start, network_end, prefix_length, map),
   Network_constructor[network_start, network_end, prefix_length] = network.

lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.
lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:SPECIFIC_STARRED_EDGE_IN_SAFETY_GRAPH_CYCLE[] = true.
// END CODE
   })
} <-- .

