block(`Route_rules) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

//BestConnectedRoute(node, network, nextHop, nextHopIp, admin, cost, protocol) <-
BestConnectedRoute(route),
   Route(route),
   InterfaceRoute_constructor[node, network, nextHopInt, protocol] = route,
   InterfaceRoute(route),
   InterfaceRoute_nextHopInt[route] = nextHopInt,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   ConnectedRoute(node, network, nextHopInt),
   SetNodeVendor(node, vendor),
   AdministrativeDistance[vendor, protocol] = admin, 
   cost = 0,
   protocol = RoutingProtocol_CONNECTED[].

BestPerProtocolRoute(route) <-
   BestConnectedRoute(route) ;
   BestStaticRoute(route).

BestStaticRoute(route) <-
   StaticIntRoute(route) ;
   StaticRoute(route).

ConnectedRoute(node, network, interface) <-
   IpReadyInt(node, interface, ip, prefix_length),
   NetworkOf[ip, prefix_length] = network.

InstalledRoute(route) <-
   MinCostRoute(route).

LongestPrefixNetworkMatch(node, ip, matchNet) <-
   LongestPrefixNetworkMatchPrefixLength[node, ip] = maxLength,
   NetworkMatch(node, ip, matchNet, maxLength).

LongestPrefixNetworkMatchPrefixLength[node, ip] = maxLength <-
   agg<<maxLength = max(matchLength)>>
      NetworkMatch(node, ip, _, matchLength).

MinAdmin[node, network] =  minAdmin <-
   agg<<minAdmin = min(admin)>>
      BestPerProtocolRoute(route),
      Route_admin[route] = admin,
      Route_network[route] = network,
      Route_node[route] = node.

MinAdminRoute(route) <-
   minAdmin = MinAdmin[node, network],
   BestPerProtocolRoute(route),
   Route_admin[route] = minAdmin,
   Route_network[route] = network,
   Route_node[route] = node.

MinCost[node, network] =  minCost <-
   agg<<minCost = min(cost)>>
      MinAdminRoute(route),
      Route_cost[route] = cost,
      Route_network[route] = network,
      Route_node[route] = node.

MinCostRoute(route) <-
   MinAdminRoute(route),
   minCost = MinCost[node, network],
   Route_cost[route] = minCost,
   Route_network[route] = network,
   Route_node[route] = node.

NetworkMatch(node, ip, matchNet, matchLength) <-
   Ip_address(ip:address),
   Network_address[matchNet] = matchNet_start,
   Network_prefix_length[matchNet] = matchLength,
   Network_end[matchNet] = matchNet_end,
   InstalledRoute(route),
   Route_network[route] = matchNet,
   Route_node[route] = node,
   matchNet_start <= address <= matchNet_end.

RouteDetails_admin[route] = admin <-
   Route_admin[route] = admin.
RouteDetails_admin[route] = admin <-
   Route(route),
   !(Route_admin[route] = _),
   admin = -1.

RouteDetails_cost[route] = cost <-
   Route_cost[route] = cost.
RouteDetails_cost[route] = cost <-
   Route(route),
   !(Route_cost[route] = _),
   cost = -1.

RouteDetails_nextHop[route] = nextHop <-
   Route(route),
   RouteDetails_nextHopIp[route] = nextHopIp,
   (
      (
         IpCount[nextHopIp] = ipCount,
         HasIp(nextHop, nextHopIp),
         ipCount = 1
      ) ;
      (
         IpCount[nextHopIp] = ipCount,
         ipCount > 1,
         nextHop = Node_AMBIGUOUS[]
      ) ;
      (
         nextHop = Node_NONE[],
         !HasIp(_, nextHopIp)
      )
   ).
RouteDetails_nextHop[route] = nextHop <-
   Route(route),
   RouteDetails_nextHopIp[route] = Ip_ZERO[],
   nextHop = Node_NONE[].

RouteDetails_nextHopInt[route] = nextHopInt <-
   InterfaceRoute_nextHopInt[route] = nextHopInt.
RouteDetails_nextHopInt[route] = nextHopInt <-
   Route(route),
   !(InterfaceRoute_nextHopInt[route] = _),
   nextHopInt = Interface_DYNAMIC[].

RouteDetails_nextHopIp[route] = nextHopIp <-
   Route_nextHopIp[route] = nextHopIp.
RouteDetails_nextHopIp[route] = nextHopIp <-
   Route(route),
   !(Route_nextHopIp[route] = _),
   nextHopIp = Ip_ZERO[].

RouteDetails_tag[route] = tag <-
   Route_tag[route] = tag.
RouteDetails_tag[route] = tag <-
   Route(route),
   !(Route_tag[route] = _),
   tag = -1.

RoutingProtocol_AGGREGATE[] = x <-
   RoutingProtocol_name(x:"aggregate").   

RoutingProtocol_BGP[] = x <-
   RoutingProtocol_name(x:"bgp").

RoutingProtocol_CONNECTED[] = x <-
   RoutingProtocol_name(x:"connected").

RoutingProtocol_IBGP[] = x <-
   RoutingProtocol_name(x:"ibgp").

RoutingProtocol_OSPF[] = x <-
   RoutingProtocol_name(x:"ospf").

RoutingProtocol_OSPF_IA[] = x <-
   RoutingProtocol_name(x:"ospfIA").

RoutingProtocol_OSPF_E1[] = x <-
   RoutingProtocol_name(x:"ospfE1").

RoutingProtocol_OSPF_E2[] = x <-
   RoutingProtocol_name(x:"ospfE2").

RoutingProtocol_STATIC[] = x <-
   RoutingProtocol_name(x:"static").

SetStaticIntRoute(node, network, nextHopIp, nextHopInt, admin, tag) <-
   SetStaticIntRoute_flat(node, network_start, network_end, prefix_length, nextHopIp, nextHopInt, admin, tag),
   Network_constructor[network_start, network_end, prefix_length] = network.

SetStaticRoute(node, network, nextHopIp, admin, tag) <-
   SetStaticRoute_flat(node, network_start, network_end, prefix_length, nextHopIp, admin, tag),
   Network_constructor[network_start, network_end, prefix_length] = network.

// static route with next hop interface
StaticIntRoute(route),
   Route(route),
   InterfaceRoute_constructor[node, network, nextHopInt, protocol] = route,
   InterfaceRoute(route),
   InterfaceRoute_nextHopInt[route] = nextHopInt,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol,
   Route_tag[route] = tag
<-
   SetStaticIntRoute(node, network, nextHopIp, nextHopInt, admin, tag),
   cost = 0,
   protocol = RoutingProtocol_STATIC[].

// static route with next hop ip
StaticRoute(route),
   Route(route),
   Route_constructor[node, network, nextHopIp, protocol] = route,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_nextHopIp[route] = nextHopIp,
   Route_node[route] = node,
   Route_protocol[route] = protocol,
   Route_tag[route] = tag
<-
   LongestPrefixNetworkMatch(node, nextHopIp, matchNet),
   network != matchNet,
   SetStaticRoute(node, network, nextHopIp, admin, tag),
   cost = 0,
   protocol = RoutingProtocol_STATIC[].

lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.

lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.

// END CODE
   })
} <-- .

