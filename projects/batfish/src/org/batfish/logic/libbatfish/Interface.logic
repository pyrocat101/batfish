block(`Interface) {
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   export(`{
// BEGIN CODE

GuessFlowSinkInterface() -> .

FlowSinkInterface(node, interface) ->
   Node(node),
   Interface(interface).

/// [HasIp(node, ip)] =
///   Some interface on node [node] is configured with ip [ip].
HasIp(node, ip) ->
   Node(node),
   Ip(ip).

/// [HasNetwork(node, network)] =
///   Some interface on node [node] is configured with an ip whose network
///   address is [network].
HasNetwork(node, network) ->
   Node(node),
   Network(network).

/// [Interface(x)] =
///   [x] is an interface.
Interface(x),
   Interface_name(x:n)
   ->
   string(n).

Interface_DYNAMIC[] = interface ->
   Interface(interface).

Interface_FLOW_SINK_TERMINATION[] = interface ->
   Interface(interface).

Interface_NULL[] = interface ->
   Interface(interface).

IpCount[ip] = cnt ->
   Ip(ip),
   int(cnt).

/// [IpReadyInt(node, interface, ip, prefix_length)] =
///   Node [node] has interface [interface] configured with ip [ip] with prefix
///   length [prefix_length], and [interface] is active.
IpReadyInt(node, interface, ip, prefix_length) ->
   Node(node),
   Interface(interface),
   Ip(ip),
   int(prefix_length).

/// [SetActiveInt(node, interface)] =
///   Node [node] has activated interface [interface].
SetActiveInt(node, interface) ->
   Node(node),
   Interface(interface).

SetFakeInterface(node, interface) ->
   Node(node),
   Interface(interface).

SetFlowSinkInterface(node, interface) ->
   Node(node),
   Interface(interface).

/// [SetIpInt(node, interface, ip, prefix_length)] =
///   Node [node] has interface [interface] configured with ip [ip] with prefix
///   length [prefix_length].
SetIpInt(node, interface, ip, prefix_length) ->
   Node(node),
   Interface(interface),
   Ip(ip),
   int(prefix_length).

/// [SetLinkLoadLimitIn[node, interface] = limit] =
///   The incoming traffic congestion threshold in bits per second of traffic
///   on interface [interface] belonging to node [node] is [limit].
SetLinkLoadLimitIn[node, interface] = limit ->
   Node(node),
   Interface(interface),
   float(limit).

/// [SetLinkLoadLimitOut[node, interface] = limit] =
///   The outgoing traffic congestion threshold in bits per second of traffic
///   on interface [interface] belonging to node [node] is [limit].
SetLinkLoadLimitOut[node, interface] = limit ->
   Node(node),
   Interface(interface),
   float(limit).

// END CODE
   })
} <-- .

