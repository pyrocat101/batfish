block(`IpAccessList) {
   alias_all(`libbatfish:Flow),
   export(`{
// BEGIN CODE

IpAccessList(list),
   IpAccessList_name(list:name)
   ->
   string(name).

IpAccessListDeny(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListFirstMatch[list, flow] = firstMatchLine ->
   IpAccessList(list),
   Flow(flow),
   int(firstMatchLine).

IpAccessListLine(list, line) ->
   IpAccessList(list),
   int(line).

IpAccessListMatch(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchDstIp(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchDstPort(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchProtocol(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchSrcIp(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListMatchSrcPort(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

IpAccessListPermit(list, line, flow) ->
   IpAccessList(list),
   int(line),
   Flow(flow).

SetIpAccessListLine_deny(list, line) ->
   IpAccessList(list),
   int(line).

SetIpAccessListLine_dstIpRange(list, line, dstIp_start, dstIp_end) ->
   IpAccessList(list),
   int(line),
   int(dstIp_start),
   int(dstIp_end).

SetIpAccessListLine_dstPortRange(list, line, dstPort_start, dstPort_end) ->
   IpAccessList(list),
   int(line),
   int(dstPort_start),
   int(dstPort_end).

SetIpAccessListLine_permit(list, line) ->
   IpAccessList(list),
   int(line).

SetIpAccessListLine_protocol(list, line, protocol) ->
   IpAccessList(list),
   int(line),
   IpProtocol(protocol).

SetIpAccessListLine_srcIpRange(list, line, srcIp_start, srcIp_end) ->
   IpAccessList(list),
   int(line),
   int(srcIp_start),
   int(srcIp_end).

SetIpAccessListLine_srcPortRange(list, line, srcPort_start, srcPort_end) ->
   IpAccessList(list),
   int(line),
   int(srcPort_start),
   int(srcPort_end).

// END CODE
   })
} <-- .
