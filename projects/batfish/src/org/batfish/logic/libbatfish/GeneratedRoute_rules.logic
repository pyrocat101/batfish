block(`GeneratedRoute_rules) {
   alias_all(`libbatfish:GeneratedRoute),
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   clauses(`{
// BEGIN CODE

ActiveGeneratedRoute(route),
   ActiveGeneratedRouteContributor(route, contributingRoute)
<-
   GeneratedRoute(route),
   InstalledRoute(contributingRoute),
   Route_network[contributingRoute] = contributingNetwork,
   Route_network[route] = network,
   Route_node[contributingRoute] = node,
   Route_node[route] = node,
   Network_address[contributingNetwork] = contributingAddress,
   Network_address[network] = startAddress,
   Network_end[network] = endAddress,
   startAddress < contributingAddress <= endAddress,
   (
      !GeneratedRoutePolicy(route, _) ;
      (
         GeneratedRoutePolicy(route, policy),
         PolicyMapPermitRoute(policy, _, contributingRoute)
      )
   ).

BestGlobalGeneratedRoute(route),
   InterfaceRoute(route),
   InterfaceRoute_nextHopInt[route] = nextHopInt,
   Route_nextHopIp[route] = nextHopIp
<-
   MinAdminContributingRoute(route, contributingRoute),
   SetGeneratedRouteDiscard(node, network),
   nextHopInt = Interface_NULL[],
   nextHopIp = Ip_ZERO[],
   Route_node[route] = node,
   Route_network[route] = network,
   Route_network[contributingRoute] = contributingNetwork,
   Network_address[contributingNetwork] = contributingAddress,
   MinContributingRouteAddress[route] = contributingAddress.

BestGlobalGeneratedRoute(route),
   BestGlobalGeneratedRoute_nextHopIp(route, nextHopIp)
<-
   MinAdminContributingRoute(route, contributingRoute),
   !SetGeneratedRouteDiscard(node, network),
   Route_node[route] = node,
   Route_network[route] = network,
   Route_network[contributingRoute] = contributingNetwork,
   Route_nextHopIp[contributingRoute] = nextHopIp,
   Network_address[contributingNetwork] = contributingAddress,
   MinContributingRouteAddress[route] = contributingAddress.

BestPerProtocolRoute(route) <-
   BestGlobalGeneratedRoute(route).

GlobalGeneratedRoute(route),
   Route(route),
   GeneratedRoute_constructor[node, network, type] = route,
   GeneratedRoute(route),
   GeneratedRoute_type[route] = type,
   Route_admin[route] = admin,
   Route_cost[route] = cost,
   Route_network[route] = network,
   Route_node[route] = node,
   Route_protocol[route] = protocol
<-
   SetGeneratedRoute(node, network, admin),
   type = GeneratedRouteType_GLOBAL[],
   protocol = RoutingProtocol_AGGREGATE[],
   (
      SetGeneratedRouteMetric(node, network, cost) ;
      (
         !SetGeneratedRouteMetric(node, network, _),
         cost = 0
      )
   ).

GeneratedRoutePolicy(route, policy) <-
   GeneratedRoute(route),
   Route_network[route] = network,
   Route_node[route] = node,
   SetGeneratedRoutePolicy(node, network, policy).

GeneratedRouteType_AGGREGATE[] = type <-
   GeneratedRouteType_name(type:"aggregate").

GeneratedRouteType_BGP[] = type <-
   GeneratedRouteType_name(type:"bgp").

GeneratedRouteType_BGP_NEIGHBOR[] = type <-
   GeneratedRouteType_name(type:"bgp_neighbor").

GeneratedRouteType_GLOBAL[] = type <-
   GeneratedRouteType_name(type:"global").

GeneratedRouteType_OSPF[] = type <-
   GeneratedRouteType_name(type:"ospf").

MinAdminContributingRoute(route, contributingRoute) <-
   ActiveGeneratedRouteContributor(route, contributingRoute),
   GlobalGeneratedRoute(route),
   Route_admin[contributingRoute] = admin,
   MinContributingRouteAdmin[route] = admin.

MinBestGlobalGeneratedRoute_nextHopIpInt[route] = minNextHopIpInt <-
   agg<<minNextHopIpInt = min(nextHopIpInt)>>
      BestGlobalGeneratedRoute_nextHopIp(route, nextHopIp),
      Ip_address(nextHopIp:nextHopIpInt).

MinContributingRouteAddress[route] = minAddress <-
   agg<<minAddress = min(address)>>
      MinAdminContributingRoute(route, contributingRoute),
      Route_network[contributingRoute] = network,
      Network_address[network] = address.

MinContributingRouteAdmin[route] = minAdmin <-
   agg<<minAdmin = min(admin)>>
      ActiveGeneratedRouteContributor(route, contributingRoute),
      GlobalGeneratedRoute(route),
      Route_admin[contributingRoute] = admin.

need_PolicyMapMatchRoute(map, route) <-
   SetGeneratedRoutePolicy(node, _, map),
   InstalledRoute(route),
   Route_node[route] = node.

Route_nextHopIp[route] = nextHopIp <-
   MinBestGlobalGeneratedRoute_nextHopIpInt[route] = nextHopIpInt,
   Ip_address(nextHopIp:nextHopIpInt).

SetGeneratedRoute(node, network, admin) <-
   SetGeneratedRoute_flat(node, network_start, network_end, prefix_length, admin),
   Network_constructor[network_start, network_end, prefix_length] = network.

SetGeneratedRouteDiscard(node, network) <-
   SetGeneratedRouteDiscard_flat(node, network_start, network_end, prefix_length),
   Network_constructor[network_start, network_end, prefix_length] = network.

SetGeneratedRouteMetric(node, network, metric) <-
   SetGeneratedRouteMetric_flat(node, network_start, network_end, prefix_length, metric),
   Network_constructor[network_start, network_end, prefix_length] = network.

SetGeneratedRoutePolicy(node, network, map) <-
   SetGeneratedRoutePolicy_flat(node, network_start, network_end, prefix_length, map),
   Network_constructor[network_start, network_end, prefix_length] = network.

lang:compiler:disableError:NEGATION_RECURSION[] = true.
lang:compiler:disableWarning:NEGATION_RECURSION[] = true.
lang:compiler:disableError:AGGREGATE_RECURSION[] = true.
lang:compiler:disableWarning:AGGREGATE_RECURSION[] = true.

// END CODE
   })
} <-- .

