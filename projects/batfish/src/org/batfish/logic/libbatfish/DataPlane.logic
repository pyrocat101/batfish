block(`DataPlane) {
   alias_all(`libbatfish:Interface),
   alias_all(`libbatfish:Ip),
   alias_all(`libbatfish:IpAccessList),
   alias_all(`libbatfish:Node),
   alias_all(`libbatfish:PolicyMap),
   alias_all(`libbatfish:Route),
   export(`{
// BEGIN CODE

Fib(node, ip, prefix_length, interface, nextHop, nextHopInt, nextHopIp) ->
   Node(node),
   Ip(ip),
   int(prefix_length),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt),
   Ip(nextHopIp).

FibDrop(node, ip) ->
   Node(node),
   Ip(ip).

FibForward(node, ip, interface, nextHop, nextHopInt) ->
   Node(node),
   Ip(ip),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt).

FibForwardPolicyRouteNextHopIp(node, ip, interface, nextHop, nextHopInt) ->
   Node(node),
   Ip(ip),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt).

FibNeighborIp(node, ip) ->
   Node(node),
   Ip(ip).

FibNeighborUnreachable(node, ip, neighborIp) ->
   Node(node),
   Ip(ip),
   Ip(neighborIp).

FibNetwork(node, network, interface, nextHop, nextHopInt) ->
   Node(node),
   Network(network),
   Interface(interface),
   Node(nextHop),
   Interface(nextHopInt).

FibRoute(node, ip) ->
   Node(node),
   Ip(ip).

SetInterfaceFilterIn(node, interface, filter) ->
   Node(node),
   Interface(interface),
   IpAccessList(filter).

SetInterfaceFilterOut(node, interface, filter) ->
   Node(node),
   Interface(interface),
   IpAccessList(filter).

SetInterfaceRoutingPolicy(node, interface, policy) ->
   Node(node),
   Interface(interface),
   PolicyMap(policy).

// END CODE
   })
} <-- .

